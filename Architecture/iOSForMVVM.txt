// Model 
struct Sample {
  let name: String
}

protocol SampleRepository {
  func fetchSample(completion: @escaping (Sample) -> Void)
}

// ViewModel
class SampleViewModel {
  private let repository: SampleRepository
  private(set) var sampleName: String = "" // Viewに公開するプロパティ

  init(repository: SampleRepository) {
    self.repository = repository
  }

  func fetchSampleData() {
    repository.fetchSample { [weak self] sample in
      self?.sampleName = sample.name
    }
  }
}

// View
class SampleViewController: UIViewController {

  @IBOutlet weak var nameLabel: UILabel!
  private let viewModel: SampleViewModel

  init?(coder: NSCoder, viewModel: SampleViewModel) {
    self.viewModel = viewModel
    super.init(coder: coder)
  }

  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    viewModel.fetchSampleData()
    // データバインディング (例: RxSwift)
    viewModel.observe(\.sampleName) { [weak self] name in
      self?.nameLabel.text = name
    }
  }
}